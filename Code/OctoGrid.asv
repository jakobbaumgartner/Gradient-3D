classdef OctoGrid < handle
    % OCTOGRID class defines 3D occupancy grid structure and methods

    properties
        grid = []; % Property to store the occupancy grid
        length = 0;
        width = 0;
        height = 0;
        resolution = 0;
    end

    methods
        function obj = OctoGrid(length, width, height, resolution)
            % Constructor for OctoGrid class
            %
            % length - length in meters
            % width - width in meters
            % height - height in meters
            % resolution - number of squares per meter
            %
            % Initialize the occupancy grid with zeros based on the given dimensions and resolution

            obj.length = length;
            obj.width = width;
            obj.height = height;
            obj.resolution = resolution;

            obj.grid = zeros(round(length)*resolution, round(width)*resolution, round(height)*resolution);

        end

        function showGridITV(obj, grid)

            % Display the occupancy grid (Image Toolbox Viewer)
            % Uses Image Processing Toolbox
            volshow(grid);
      
        end

      
        function showGridVoxel(obj, grid, varargin)
            % This function displays a 3D space matrix as a 3D plot, where each voxel 
            % is represented by a cube. Only voxels with a value above the 
            % min_display_value threshold are displayed.

            % if varargin > 0 set min_display value and space_resoulution

            min_display_value = 0.5;
            space_resolution = 10;

            if(size(varargin,2)) > 0
                min_display_value = cell2mat(varargin(1));
            end

            if ((size(varargin,2)) == 2)
                space_resolution = cell2mat(varargin(2));
            end
        
                
            % loop through every element of the space matrix
            for x = 1:size(grid, 1)
                for y = 1:size(grid, 2)
                    for z = 1:size(grid, 3)
                        % get the start position of the voxel (bottom left corner)
                        start = [(x-1), (y-1), (z-1)];
                        
                        % get the value of the current voxel
                        voxel_value = grid(x,y,z);
        
                        % draw the voxel as a cube if its value is above the 
                        % min_display_value threshold
                        if voxel_value > min_display_value
                            % draw a cube at the position defined by start, with 
                            % dimensions [1 1 1] and color black ('k'). The value 
                            % of the voxel is used to set the color of the cube.
                            voxel(start * space_resolution, [1 1 1] * space_resolution, 'k', voxel_value);
                        end
                        
                        % keep the same plot for subsequent voxel cubes
                        hold on
                    end
                end
            end
    
            % Set the fixed axis limits
            axis([0, size(grid,1), 0, size(grid,2),0,size(grid,3)]*space_resolution)

            % set the default line of sight for the 3D plot
            view(3)
        
        end


        function showGridVol3D(obj, grid)

            selected_color = [48 123 242];

            grid_size = size(grid);

            colors = ones(grid_size(1), grid_size(2), grid_size(3), 3);
            colors(:,:,:,1) = selected_color(1);
            colors(:,:,:,2) = selected_color(2);
            colors(:,:,:,3) = selected_color(3);



            H = vol3d('CData',colors) %, 'Alpha', grid)






        end



        function addBox(obj, x, y, z, length, width, height)
            % Set pixels of a box object as occupied, given input dimensions
            
            % x, y, z - coordinates of the box's bottom-left corner
            % length, width, height - dimensions of the box
            
            % Convert the box dimensions from meters to grid indices
            x_start = round(x * obj.resolution) + 1;
            x_end = round((x + length) * obj.resolution);
            y_start = round(y * obj.resolution) + 1;
            y_end = round((y + width) * obj.resolution);
            z_start = round(z * obj.resolution) + 1;
            z_end = round((z + height) * obj.resolution);
            
            % Set the corresponding grid elements as occupied (1)
            obj.grid(x_start:x_end, y_start:y_end, z_start:z_end) = 1;

            sum(sum(sum(obj.grid)))
        end

    end
end