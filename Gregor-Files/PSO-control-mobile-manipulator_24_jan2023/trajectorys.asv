classdef trajectorys

    properties
        
        step = 0.01;
        totalTime = 3;
        displayDensity = 25;

    end

    methods

        function [eeTraj, baseTraj] = trajectoryOrientation(obj, showPlot)
                        
            % initial pose base
            xb0 = [0 0 0]; % x y fi

            % initial pose joints
            q0 = [0 0 0 -pi/2 0 4/5*pi 0];

            % initial EE 
            tEE0 = [    0.5882   -0.0040    0.8087    0.5327
                       -0.0023   -1.0000   -0.0032   -0.0019
                        0.8087    0.0000   -0.5882    1.6252
                        0         0         0         1.0000];

            rEE0 = tEE0(1:3,1:3);

            % final EE
           rEE1 = [ 0.9496   -0.0033    0.3135 
                   -0.2730   -0.5000    0.8218 
                    0.1540   -0.8660   -0.4757 ];


            % base trajectory
            xtb = 0:obj.step:obj.totalTime;
            ytb = 0.1 * sin(2*xtb);

            % EE trajectory
            xtee = 0:obj.step:obj.totalTime;
            ytee = 0.25 * ones(size(0:obj.step:obj.totalTime));
            ztee = [1.4 + 0.2252/(obj.totalTime/2) * (0:obj.step:obj.totalTime/2) 1.6252 - 0.2252/(obj.totalTime/2) *  (obj.step:obj.step:obj.totalTime/2)]; 
            rotee = rottraj(rEE0, rEE1,[0 obj.totalTime], 0:obj.step:obj.totalTime);

            % create eeTraj - T matrixes, baseTraj
            eeTraj = [];

            for i = 1:1:size(xtb,2)
                
                % EE traj
                eeTraj(:,:,i) = eye(4);
                eeTraj(1:3,1:3,i) = rotee(:,:,i);
                eeTraj(1,4,i) = xtee(i);
                eeTraj(2,4,i) = ytee(i);
                eeTraj(3,4,i) = ztee(i);

            end


            
            
            % draw plot
            if showPlot

                figure()
                
                % plot base
                plot3(xtb,ytb,zeros(size(xtb)),'Color', "#0072BD")
                axis equal
                grid                
                hold on

                % plot EE
                plot3(xtee,ytee,ztee, 'Color', "#A2142F")

                % plot EE ground projection
                plot3(xtee,ytee,zeros(size(xtb)), '--', 'Color', "#A2142F")

                % draw oritentations
                translations = [xtee' ytee' ztee' ];
                rotations = rotm2quat(rotee);
                plotTransforms(translations(1:obj.displayDensity:end,:),rotations(1:obj.displayDensity:end,:))
               
                hold off


            end
            


        end
       
        function points = trajectory1(obj, showPlot)
            
            % initialize variables
            x = [];
            y = [];
            z = [];

            % part 1
            x1 = [0:obj.step:0.20];
            z1 = ones(1,length(x1)) * 1.2;

            x = x1;
            z = z1;

            % part 2
            
            x2 = 0.20+obj.step:obj.step:0.35;
            x = [x x2];
            z2 = 0.2/0.12*(x2-0.22) + 1.2;
            z = [z z2];

            % part 3

            x3 = 0.34+obj.step:obj.step:0.5;
            z3 = ones(1,length(x3))*1.4;
            x = [x x3];
            z = [z z3];

            % part 4

            x4 = 0.5+obj.step:obj.step:0.7;
            z4 = 0.2/0.2*(x4-0.52) + 1.4;
            x = [x x4];
            z = [z z4];

            % part 5

            x5 = 0.7+obj.step:obj.step:1;
            z5 = -0.3/0.3*(x5-0.72) + 1.58;

            x = [x x5];
            z = [z z5];

            % part 6
            
            x6 = 1+obj.step:obj.step:1.5;
            z6 = ones(1,length(x6))*1.3;

            x = [x x6];
            z = [z z6];

            y = ones(1,size(x,2));

            % orientation

            fi = + 3* pi/4;
            Rx = [1 0 0; 0 cos(fi) -sin(fi); 0 sin(fi) cos(fi)];

            R = eye(3) * Rx;

      
            % create series of matrixes
            for i = 1:1:length(x)
                points(:,:,i) = eye(4);
                points(1:3,1:3,i) = R;
                points(1,4,i) = x(i);
                points(2,4,i) = y(i);
                points(3,4,i) = z(i);

            end

            % plot
            if (showPlot)
                figure()
                plot3(x,y,z)
                hold on
                quiver3(x,y,z,R(3,1)*ones(1,length(x)), R(3,2)*ones(1,length(x)), R(3,3)*ones(1,length(x)))
                axis([-0.1 1.5 0.5 1.5 0 2])
                hold off
            end

        end
    end
end